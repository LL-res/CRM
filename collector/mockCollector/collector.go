// Code generated by MockGen. DO NOT EDIT.
// Source: collector.go

// Package mock_collector is a generated GoMock package.
package mock_collector

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCollector is a mock of Collector interface.
type MockCollector struct {
	ctrl     *gomock.Controller
	recorder *MockCollectorMockRecorder
}

// MockCollectorMockRecorder is the mock recorder for MockCollector.
type MockCollectorMockRecorder struct {
	mock *MockCollector
}

// NewMockCollector creates a new mock instance.
func NewMockCollector(ctrl *gomock.Controller) *MockCollector {
	mock := &MockCollector{ctrl: ctrl}
	mock.recorder = &MockCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCollector) EXPECT() *MockCollectorMockRecorder {
	return m.recorder
}

// Collect mocks base method.
func (m *MockCollector) Collect(stopChan <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Collect", stopChan)
}

// Collect indicates an expected call of Collect.
func (mr *MockCollectorMockRecorder) Collect(stopChan interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Collect", reflect.TypeOf((*MockCollector)(nil).Collect), stopChan)
}

// DataCap mocks base method.
func (m *MockCollector) DataCap() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DataCap")
	ret0, _ := ret[0].(int)
	return ret0
}

// DataCap indicates an expected call of DataCap.
func (mr *MockCollectorMockRecorder) DataCap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DataCap", reflect.TypeOf((*MockCollector)(nil).DataCap))
}

// GetMetrics mocks base method.
func (m *MockCollector) GetMetrics(length int) []float64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMetrics", length)
	ret0, _ := ret[0].([]float64)
	return ret0
}

// GetMetrics indicates an expected call of GetMetrics.
func (mr *MockCollectorMockRecorder) GetMetrics(length interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMetrics", reflect.TypeOf((*MockCollector)(nil).GetMetrics), length)
}
